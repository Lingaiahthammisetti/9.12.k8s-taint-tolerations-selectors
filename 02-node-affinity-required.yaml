apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  containers:
  - name: nginx
    image: nginx
  tolerations:
  - key: "project"
    operator: "Equal"
    value: "expense"
    effect: "NoSchedule"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: project
            operator: In
            values:
            - expense

# To make taints + tolerations + affinity work together:

# Taint the node:
# kubectl taint node my-node project=expense:NoSchedule

# Label the node:
# kubectl label node my-node project=expense

# ðŸ’¡ Summary
# ðŸ”¹ Labeling is for affinity (which node the pod wants).
# ðŸ”¹ Tainting is for restricting which pods are allowed on the node.
# ðŸ”¹ Toleration allows the pod to be scheduled on a tainted node.
# âœ… So yes â€” both labeling and tainting are correct and needed in your use case.

# First apply taint on specific node and then apply tolerations on it.
# kubectl get nodes
# kubectl taint nodes ip-192-168-42-153.ec2.internal project=expense:NoSchedule

